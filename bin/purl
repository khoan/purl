#!/bin/bash

purl::usage()
{
  if [ $1 -ne 2 ]; then
    purl::exit wrongargs <<MSG
  usage:
      $ cd ~/Downloads
      $ purl <url> <file>
MSG
  fi
}

length=
purl::length()
{
  local IFS accept_ranges content_length capture resp
  resp=$(curl -IL $1 | grep 'Accept-Ranges:\|Content-Length:')
  IFS=$' \n\r'

  for i in $resp; do
    case $i in
      Content-Length:)
        capture='content_length'
        ;;
      Accept-Ranges:)
        capture='accept_ranges'
        ;;
      *)
        printf -v "${capture}" '%b' "${i}"
        ;;
    esac
  done

  if [ "$accept_ranges" == "bytes" ]; then
    length=$content_length
  else
    # TODO should we just download?
    purl::exit lose <<MSG
  Lack of love from server
MSG
  fi
}

parts=
purl::parts()
{
  local count file i step lower upper size _10Mb _1Gb _10Gb
  _10Mb=10485760
  _1Gb=1073741824
  _10Gb=10737418240

  if [ "$2" -lt $_10Mb ]; then
    count=1
  elif [ "$2" -lt $_1Gb ]; then
    count=10
  elif [ "$2" -lt $_10Gb ]; then
    count=20
  else
    count=30
  fi

  step=$(( $2 / $count + 1 ))
  size=$step

  i=0
  for (( lower=0; lower < $2; lower += $step )); do
    printf -v file ".%s.%02d" "$1" "$i"

    upper=$(( lower + $step - 1 ))

    if [ $upper -gt $2 ]; then
      upper=
      size=$(( $2 - $lower ))
    fi

    parts="$parts $file $lower-$upper $size"

    (( i++ ))
  done
}

purl::download()
{
  local IFS file range size rest lower upper file_size
  IFS=$' '
  rest=$2

  while [ -n "$rest" ]; do
    read file range size rest <<< "$rest"

    if [ -f "$file" ]; then
      file_size=$(stat -f%z "$file")

      if [ "$file_size" -lt "$size" ]; then
        IFS=- read lower upper <<< "$range"
        lower=$(( $lower + $file_size + 1 ))
        range="$lower-$upper"
      else
        range=
      fi 
    fi

    if [ -n "$range" ]; then
      curl -sL -r "$range" $1 >> "$file" &
    fi
  done

  #purl::progress "$2" "$pids"
  purl::progress "$2"
}

purl::progress()
{
  wait
}

purl::assemble()
{
  local IFS file range rest parts
  IFS=$' '
  rest=$2

  while [ -n "$rest" ]; do
    read file range rest <<< "$rest"
    parts="$parts $file"
  done

  cat $parts > $1
  rm $parts
}

purl::exit()
{
  cat

  case $1 in
    win)       exit 0  ;;
    lose|*)      exit 1  ;;
    wrongargs) exit 85 ;;
  esac
}

purl::usage $#

URL=$1
FILE=$2

purl::length $URL
purl::parts $FILE $length
purl::download $URL "$parts"
purl::assemble $FILE "$parts"

purl::exit win <<MSG
done
MSG
